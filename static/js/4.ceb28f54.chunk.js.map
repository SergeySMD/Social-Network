{"version":3,"sources":["components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatus.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","redux/profileSelectors.js","components/Profile/Profile.jsx"],"names":["module","exports","ProfileStatus","React","Component","props","useState","editMode","setEditMode","status","setStatus","className","s","description","span","onDoubleClick","link","id","autoFocus","onChange","e","currentTarget","value","onFocus","target","style","cursor","borderBottom","onBlur","updateStatus","placeholder","maxLength","ProfileInfo","content","image","src","backgroundImage","descriptionBlock","avatar","avatarOtherUser","avatarIcon","title","xmlns","width","height","viewBox","fill","d","transform","cx","cy","r","type","event","updateAvatar","files","userName","username","match","params","userId","Post","message","newText","setNewText","item","boxShadow","author","menu","postId","remove","removePost","onEditClick","date","postEdit","textArea","onTextChange","maxlength","maxRows","saveButton","onClick","text","setEditPostNewText","deleteButton","cancelButton","PostImage","postPhoto","likeBlock","onLikeClick","isLiked","color","likeCounter","PostMenu","Dropdown","upward","icon","Menu","Item","disabled","maxLength1200","ImagePreview","imagePreview","imagePreviewButton","setPostImageURL","setPostImageFiles","setClearImage","PostInputReduxForm","reduxForm","form","PostImageURL","PostImageFiles","clearImage","undefined","length","imageFile","callback","reader","FileReader","readAsDataURL","onload","result","readyState","readImages","inputBlock","onSubmit","handleSubmit","newPost","Field","name","component","PostInputComponent","validate","button","enctype","PostImageUploadComponent","setFiles","clip-path","MyPosts","clearPreview","setClearPreview","postsElements","posts","map","p","deletePostImage","readFile","postText","file","addEventListener","addPost","postBlock","Data","console","log","postImage","memo","getMyId","state","auth","getIsFetching","usersPage","isFetching","Profile","likePost","this","getStatus","getProfile","prevProps","prevState","snapshot","Preloader","h","w","profilePage","profileInfo","myPosts","mapDispatchToProps","setImagePreview","compose","connect","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/4.ceb28f54.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"Profile_profileInfo__2PujG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"image\":\"ProfileInfo_image__jsKeo\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__gyXI4\",\"avatar\":\"ProfileInfo_avatar__2tJn4\",\"avatarOtherUser\":\"ProfileInfo_avatarOtherUser__1pztr\",\"avatarIcon\":\"ProfileInfo_avatarIcon__Y-v_g\",\"userName\":\"ProfileInfo_userName__PKB88\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"ProfileStatus_description__4YNrn\",\"span\":\"ProfileStatus_span__17NXe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__1wHR4\",\"posts\":\"MyPosts_posts__26m-c\",\"inputBlock\":\"MyPosts_inputBlock__wxBPM\",\"newPost\":\"MyPosts_newPost__2wsp1\",\"button\":\"MyPosts_button__1kAMd\",\"title\":\"MyPosts_title__203e2\",\"imagePreview\":\"MyPosts_imagePreview__25Nac\",\"imagePreviewButton\":\"MyPosts_imagePreviewButton__2jOkz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3QQMS\",\"image\":\"Post_image__KoSy2\",\"author\":\"Post_author__BHyhv\",\"menu\":\"Post_menu__Gi-Zy\",\"date\":\"Post_date__2qxWE\",\"message\":\"Post_message__3OJR5\",\"likeBlock\":\"Post_likeBlock__2W7dA\",\"textArea\":\"Post_textArea__2vTy0\",\"postEdit\":\"Post_postEdit__3mQcU\",\"saveButton\":\"Post_saveButton__2qi46\",\"deleteButton\":\"Post_deleteButton__39Iso\",\"cancelButton\":\"Post_cancelButton__1rKj2\",\"postPhoto\":\"Post_postPhoto__1P5jQ\",\"imagePreviewButton\":\"Post_imagePreviewButton__1Gioq\"};","import React, {useState, useEffect} from 'react'\r\nimport s from \"./ProfileStatus.module.css\";\r\n\r\nclass ProfileStatusClass extends React.Component {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n    activateEditMode = () => {\r\n        if (this.props.link == this.props.id) {\r\n            this.setState({\r\n                editMode: true\r\n            })\r\n        }\r\n    }\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatus(this.state.status);\r\n    }\r\n    onStatusChange = (e) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.status !== this.props.status) {\r\n            this.setState({status: this.props.status})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.description}>\r\n                {!this.state.editMode &&\r\n                <div className={s.span}>\r\n                    <span className={s.span}\r\n                          onDoubleClick={this.activateEditMode}>{this.props.status || 'Empty status'}</span>\r\n                </div>\r\n                }\r\n                {this.state.editMode &&\r\n                <div>\r\n                    <input\r\n                        autoFocus={true}\r\n                        onChange={this.onStatusChange}\r\n                        onFocus={(e) => {\r\n                            e.target.style.cursor = \"text\"\r\n                            e.target.style.borderBottom = \"1px solid var(--black-white-text-color)\"\r\n                        }}\r\n                        onBlur={this.deactivateEditMode}\r\n                        value={this.state.status}\r\n                        placeholder=\"Enter your status\"\r\n                        maxLength=\"60\"/>\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst ProfileStatus = (props) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [status, setStatus] = useState(props.status);\r\n    // useEffect(()=>{\r\n    //     setStatus(props.status)\r\n    // },[props.status])\r\n\r\n    const activateEditMode = () => {\r\n        if (props.link == props.id) {\r\n            setStatus(props.status)\r\n            setEditMode(true)\r\n        }\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status);\r\n    }\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={s.description}>\r\n            {!editMode &&\r\n            <div className={s.span}>\r\n                <span className={s.span}\r\n                      onDoubleClick={activateEditMode}>{props.status || 'Empty status'}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    autoFocus={true}\r\n                    onChange={onStatusChange}\r\n                    onFocus={(e) => {\r\n                        e.target.style.cursor = \"text\"\r\n                        e.target.style.borderBottom = \"1px solid var(--black-white-text-color)\"\r\n                    }}\r\n                    onBlur={deactivateEditMode}\r\n                    value={status}\r\n                    placeholder=\"Enter your status\"\r\n                    maxLength=\"60\"/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport ProfileStatus from './ProfileStatus'\r\n\r\nlet ProfileInfo = (props) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <div className={s.image}>\r\n                <img src={props.backgroundImage}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <div className={props.link==props.id ? s.avatar : s.avatarOtherUser}>\r\n                    {props.link==props.id ?\r\n                    <label className={s.avatarIcon} title={'Загрузить фото'}><div>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"76.232\" height=\"60\" viewBox=\"0 0 76.232 60\" fill=\"black\">\r\n                        <g>\r\n                            <path d=\"M73.7,54.148a8.2,8.2,0,0,0-6.014-2.536H55.652v-.145a6.506,6.506,0,0,0-1.957-4.71,6.63,6.63,0,0,0-4.71-1.957H27.246a6.68,6.68,0,0,0-6.739,6.667v.145H8.551a8.2,8.2,0,0,0-6.014,2.536A8.615,8.615,0,0,0,0,60.162V96.249a8.2,8.2,0,0,0,2.536,6.014A8.615,8.615,0,0,0,8.551,104.8h59.13a8.2,8.2,0,0,0,6.014-2.536,8.615,8.615,0,0,0,2.536-6.014V60.162A8.2,8.2,0,0,0,73.7,54.148Zm-1.232,42.1h-.072a4.7,4.7,0,0,1-4.71,4.71H8.551a4.7,4.7,0,0,1-4.71-4.71V60.162a4.7,4.7,0,0,1,4.71-4.71H22.536A1.948,1.948,0,0,0,24.493,53.5v-2.1a2.728,2.728,0,0,1,2.826-2.826H48.985a2.728,2.728,0,0,1,2.826,2.826v2.1a1.948,1.948,0,0,0,1.957,1.957H67.754a4.7,4.7,0,0,1,4.71,4.71Z\" transform=\"translate(0 -44.8)\"/>\r\n                            <path d=\"M129.826,130.8a17.813,17.813,0,1,0,12.609,5.217A17.858,17.858,0,0,0,129.826,130.8Zm9.855,27.754a14,14,0,0,1-19.71,0,13.853,13.853,0,0,1-4.058-9.855,14.161,14.161,0,0,1,4.058-9.855,13.853,13.853,0,0,1,9.855-4.058,14.161,14.161,0,0,1,9.855,4.058,13.853,13.853,0,0,1,4.058,9.855A13.559,13.559,0,0,1,139.681,158.554Z\" transform=\"translate(-91.71 -115.22)\"/>\r\n                            <circle cx=\"3.551\" cy=\"3.551\" r=\"3.551\" transform=\"translate(60.362 15.507)\"/>\r\n                        </g>\r\n                        </svg>\r\n                    </div>\r\n                        <input type=\"file\" onChange={(event)=>{props.updateAvatar(event.currentTarget.files[0],props.id)}}/>\r\n                    </label> : null }\r\n                    <img src={props.avatar}/>\r\n                </div>\r\n                <div className={s.userName}>{props.username}</div>\r\n                <div>\r\n                    <ProfileStatus status={props.status}\r\n                                   link={props.match.params.userId}\r\n                                   id={props.id}\r\n                                   updateStatus={props.updateStatus}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo;","import React, {useState, useEffect} from 'react';\r\nimport s from './Post.module.css';\r\nimport {Dropdown} from \"semantic-ui-react\";\r\nimport {PostInputComponent} from \"../../../Commons/FormControls/FormsControls\";\r\nimport TextareaAutosize from \"react-textarea-autosize\";\r\nimport {ImagePreview} from \"../MyPosts\";\r\n\r\nconst Post = (props) => {\r\n    let [newText, setNewText] = useState(props.message)\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    const onTextChange = (event) => {\r\n        setNewText(event.target.value)\r\n    }\r\n    const onCancelButtonClick = () => {\r\n        setEditMode(false);\r\n        setNewText(props.message)\r\n    }\r\n    const onEditClick = () => {\r\n        setEditMode(true)\r\n    }\r\n    const onSaveButtonClick = (id, text) => {\r\n        props.setEditPostNewText(id, text)\r\n        setEditMode(false)\r\n        setNewText(props.message)\r\n    }\r\n    const onDeleteButtonClick = (id) => {\r\n        props.removePost(id)\r\n    }\r\n\r\n    return (\r\n        <div className={s.item} style={editMode ? {boxShadow: '0px 16px 32px rgba(0, 0, 0, 0.08)'} : {}}>\r\n            <div className={s.image}><img src={props.avatar}/></div>\r\n            <div className={s.author}>{props.username}</div>\r\n            <div className={s.menu}>\r\n                <PostMenu postId={props.id} remove={props.removePost} editMode={editMode} onEditClick={onEditClick}/>\r\n            </div>\r\n            <div className={s.date}>{props.date}</div>\r\n            <div className={s.message}>\r\n                {editMode ?\r\n                    <div className={s.postEdit}>\r\n                        <TextareaAutosize className={s.textArea}\r\n                                          value={newText}\r\n                                          onChange={(event) => {\r\n                                              onTextChange(event)\r\n                                          }}\r\n                                          type=\"text\"\r\n                                          maxlength={1200}\r\n                                          placeholder={\"Your post message\"} maxRows={16}/>\r\n                        {newText\r\n                            ? <button className={s.saveButton} onClick={() => {\r\n                                onSaveButtonClick(props.id, newText)\r\n                            }}>Save</button>\r\n                            : <button className={s.deleteButton} onClick={() => {\r\n                                onDeleteButtonClick(props.id)\r\n                            }}>Delete</button>}\r\n                        <button className={s.cancelButton} onClick={() => {\r\n                            onCancelButtonClick()\r\n                        }}>Cancel\r\n                        </button>\r\n                    </div>\r\n                    :\r\n                    <span>{props.message}</span>}\r\n                {props.PostImage !== null ?\r\n                    <div className={s.postPhoto}>\r\n                        <img src={props.PostImage}/>\r\n            {/*            {editMode ?*/}\r\n            {/*                <div className={s.imagePreviewButton} title={'Delete image'} onClick={() => {*/}\r\n            {/*                    props.deletePostImage(props.id)*/}\r\n            {/*                }}>*/}\r\n            {/*                    <svg height=\"12pt\" width=\"12pt\" xmlns=\"http://www.w3.org/2000/svg\"*/}\r\n            {/*                         viewBox=\"0 0 512.001 512.001\"*/}\r\n            {/*                         fill=\"black\">*/}\r\n            {/*                        <path d=\"M294.111,256.001L504.109,46.003c10.523-10.524,10.523-27.586,0-38.109c-10.524-10.524-27.587-10.524-38.11,0L256,217.892*/}\r\n\t\t\t{/*L46.002,7.894c-10.524-10.524-27.586-10.524-38.109,0s-10.524,27.586,0,38.109l209.998,209.998L7.893,465.999*/}\r\n\t\t\t{/*c-10.524,10.524-10.524,27.586,0,38.109c10.524,10.524,27.586,10.523,38.109,0L256,294.11l209.997,209.998*/}\r\n\t\t\t{/*c10.524,10.524,27.587,10.523,38.11,0c10.523-10.524,10.523-27.586,0-38.109L294.111,256.001z\"/>*/}\r\n            {/*                    </svg>*/}\r\n            {/*                </div> : null}*/}\r\n                    </div>\r\n                    : null}\r\n            </div>\r\n            <div className={s.likeBlock}>\r\n                <svg\r\n                    onClick={() => {\r\n                        props.onLikeClick(props.id)\r\n                    }}\r\n                    width=\"20\" height=\"20\" viewBox=\"0 0 512 512\" fill=\"black\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    {props.isLiked\r\n                        ? <path fill=\"var(--color-block)\"\r\n                                d=\"M376,30c-27.783,0-53.255,8.804-75.707,26.168c-21.525,16.647-35.856,37.85-44.293,53.268\r\n\t\t\tc-8.437-15.419-22.768-36.621-44.293-53.268C189.255,38.804,163.783,30,136,30C58.468,30,0,93.417,0,177.514\r\n\t\t\tc0,90.854,72.943,153.015,183.369,247.118c18.752,15.981,40.007,34.095,62.099,53.414C248.38,480.596,252.12,482,256,482\r\n\t\t\ts7.62-1.404,10.532-3.953c22.094-19.322,43.348-37.435,62.111-53.425C439.057,330.529,512,268.368,512,177.514\r\n\t\t\tC512,93.417,453.532,30,376,30z\"/>\r\n                        : <path fill=\"var(--707070-EDEEF0-text-color)\"\r\n                                d=\"M474.644,74.27C449.391,45.616,414.358,29.836,376,29.836c-53.948,0-88.103,32.22-107.255,59.25\r\n\t\t\tc-4.969,7.014-9.196,14.047-12.745,20.665c-3.549-6.618-7.775-13.651-12.745-20.665c-19.152-27.03-53.307-59.25-107.255-59.25\r\n\t\t\tc-38.358,0-73.391,15.781-98.645,44.435C13.267,101.605,0,138.213,0,177.351c0,42.603,16.633,82.228,52.345,124.7\r\n\t\t\tc31.917,37.96,77.834,77.088,131.005,122.397c19.813,16.884,40.302,34.344,62.115,53.429l0.655,0.574\r\n\t\t\tc2.828,2.476,6.354,3.713,9.88,3.713s7.052-1.238,9.88-3.713l0.655-0.574c21.813-19.085,42.302-36.544,62.118-53.431\r\n\t\t\tc53.168-45.306,99.085-84.434,131.002-122.395C495.367,259.578,512,219.954,512,177.351\r\n\t\t\tC512,138.213,498.733,101.605,474.644,74.27z M309.193,401.614c-17.08,14.554-34.658,29.533-53.193,45.646\r\n\t\t\tc-18.534-16.111-36.113-31.091-53.196-45.648C98.745,312.939,30,254.358,30,177.351c0-31.83,10.605-61.394,29.862-83.245\r\n\t\t\tC79.34,72.007,106.379,59.836,136,59.836c41.129,0,67.716,25.338,82.776,46.594c13.509,19.064,20.558,38.282,22.962,45.659\r\n\t\t\tc2.011,6.175,7.768,10.354,14.262,10.354c6.494,0,12.251-4.179,14.262-10.354c2.404-7.377,9.453-26.595,22.962-45.66\r\n\t\t\tc15.06-21.255,41.647-46.593,82.776-46.593c29.621,0,56.66,12.171,76.137,34.27C471.395,115.957,482,145.521,482,177.351\r\n\t\t\tC482,254.358,413.255,312.939,309.193,401.614z\"/>\r\n                    }\r\n\r\n                </svg>\r\n                <span style={props.isLiked?{color: 'var(--color-block)'}:{color: 'var(--707070-EDEEF0-text-color)'}}>{props.likeCounter}</span></div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;\r\n\r\nconst PostMenu = ({postId, remove, editMode, onEditClick}) => {\r\n    return (\r\n        <Dropdown upward\r\n                  icon={<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"black\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                      <path d=\"M2.00001 12C3.10459 12 4.00003 11.1046 4.00003 10C4.00003 8.89543 3.10459 8 2.00001 8C0.895437 8 0 8.89543 0 10C0 11.1046 0.895437 12 2.00001 12Z\"/>\r\n                      <path d=\"M9.99996 12C11.1045 12 12 11.1046 12 10C12 8.89543 11.1045 8 9.99996 8C8.89539 8 7.99995 8.89543 7.99995 10C7.99995 11.1046 8.89539 12 9.99996 12Z\"/>\r\n                      <path d=\"M18 12C19.1046 12 20 11.1046 20 10C20 8.89543 19.1046 8 18 8C16.8954 8 16 8.89543 16 10C16 11.1046 16.8954 12 18 12Z\"/>\r\n                  </svg>}>\r\n            <Dropdown.Menu>\r\n                <Dropdown.Item key=\"Edit post\" text='Edit post' value='Edit post' icon={'edit outline'}\r\n                               disabled={editMode}\r\n                               onClick={() => {\r\n                                   onEditClick()\r\n                               }}/>\r\n                <Dropdown.Item key=\"Delete post\" text='Delete post' value='Delete post'\r\n                               icon={'trash alternate outline'}\r\n                               onClick={() => remove(postId)}/>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm, reset} from \"redux-form\";\r\nimport {maxLength, required} from \"../../../utils/validators\";\r\nimport {\r\n    PostImageUploadComponent, PostInputComponent\r\n} from \"../../Commons/FormControls/FormsControls\";\r\n\r\n\r\nconst maxLength1200 = maxLength(1200);\r\n\r\n\r\nconst readImages = (imageFile, callback) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(imageFile);\r\n    reader.onload = (event) => {\r\n        const result = event.target.result;\r\n        if (reader.readyState === 2) callback(result)\r\n    }\r\n}\r\n\r\nexport const PostInputForm = (props) => {\r\n    const [PostImageURL, setPostImageURL] = useState(null)\r\n    const [PostImageFiles, setPostImageFiles] = useState([])\r\n    const [clearImage, setClearImage] = useState(false)\r\n\r\n    if (PostImageURL !== undefined)\r\n        if (PostImageFiles.length > 0) {\r\n            readImages(PostImageFiles[0], setPostImageURL)\r\n        }\r\n\r\n    return (\r\n        <div>\r\n            <form className={s.inputBlock} onSubmit={props.handleSubmit}>\r\n                <div className={s.newPost}>\r\n                    <Field name={'postText'}\r\n                           component={PostInputComponent}\r\n                           validate={[maxLength1200]}\r\n                    />\r\n                </div>\r\n                <div className={s.button}>\r\n                    <Field name={'postImage'} enctype=\"multipart/form-data\"\r\n                           component={PostImageUploadComponent}\r\n                           setFiles={setPostImageFiles}\r\n                           type='file'\r\n                           clearImage={clearImage}\r\n                           setClearImage={setClearImage}\r\n                    />\r\n                    <button onClick={()=>{setPostImageFiles([]);setPostImageURL(null)}}>\r\n                        <svg width=\"20\" height=\"16\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <g clip-path=\"url(#clip0)\">\r\n                                <path\r\n                                    d=\"M7.29165 14.6766V18.5416C7.29165 18.8116 7.46498 19.0508 7.72165 19.1358C7.78581 19.1566 7.85165 19.1666 7.91665 19.1666C8.11165 19.1666 8.29998 19.075 8.41998 18.9116L10.6808 15.835L7.29165 14.6766Z\"\r\n                                    fill=\"#8683F8\"/>\r\n                                <path\r\n                                    d=\"M19.7375 0.115907C19.5459 -0.0199262 19.2942 -0.0382595 19.0859 0.0709072L0.335833 9.86257C0.114166 9.97841 -0.0166678 10.2151 0.00166559 10.4642C0.0208323 10.7142 0.186666 10.9276 0.422499 11.0084L5.63501 12.7901L16.7359 3.29841L8.14584 13.6476L16.8817 16.6334C16.9467 16.6551 17.015 16.6667 17.0834 16.6667C17.1967 16.6667 17.3092 16.6359 17.4084 16.5759C17.5667 16.4792 17.6742 16.3167 17.7017 16.1342L19.9934 0.717574C20.0275 0.484241 19.9292 0.252574 19.7375 0.115907Z\"\r\n                                    fill=\"#8683F8\"/>\r\n                            </g>\r\n                            <defs>\r\n                                <clipPath id=\"clip0\">\r\n                                    <rect width=\"20\" height=\"20\" fill=\"white\"/>\r\n                                </clipPath>\r\n                            </defs>\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n                {(PostImageURL) ? <ImagePreview src={PostImageURL}\r\n                                                setPostImageURL={setPostImageURL}\r\n                                                setPostImageFiles={setPostImageFiles}\r\n                                                setClearImage={setClearImage}/> : null}\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport const ImagePreview = (props) => {\r\n\r\n    return (\r\n        <div className={s.imagePreview}>\r\n            <img src={props.src}/>\r\n            <div className={s.imagePreviewButton} title={'Delete image'} onClick={() => {\r\n                props.setPostImageURL(null)\r\n                props.setPostImageFiles([])\r\n                props.setClearImage(true)\r\n            }}>\r\n                <svg height=\"12pt\" width=\"12pt\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512.001 512.001\"\r\n                     fill=\"black\">\r\n                    <path d=\"M294.111,256.001L504.109,46.003c10.523-10.524,10.523-27.586,0-38.109c-10.524-10.524-27.587-10.524-38.11,0L256,217.892\r\n\t\t\tL46.002,7.894c-10.524-10.524-27.586-10.524-38.109,0s-10.524,27.586,0,38.109l209.998,209.998L7.893,465.999\r\n\t\t\tc-10.524,10.524-10.524,27.586,0,38.109c10.524,10.524,27.586,10.523,38.109,0L256,294.11l209.997,209.998\r\n\t\t\tc10.524,10.524,27.587,10.523,38.11,0c10.523-10.524,10.523-27.586,0-38.109L294.111,256.001z\"/>\r\n                </svg>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst PostInputReduxForm = reduxForm({form: 'ProfilePostInputForm'})(PostInputForm)\r\n\r\nlet MyPosts = (props) => {\r\n    const [clearPreview, setClearPreview] = useState(false)\r\n\r\n    let postsElements = props.posts\r\n        .map(p => <Post\r\n            avatar={props.avatar}\r\n            username={props.username}\r\n            message={p.message}\r\n            likeCounter={p.likeCounter}\r\n            isLiked={p.isLiked}\r\n            date={p.date}\r\n            PostImage={p.PostImage}\r\n            onLikeClick={props.onLikeClick}\r\n            removePost={props.removePost}\r\n            setEditPostNewText={props.setEditPostNewText}\r\n            deletePostImage={props.deletePostImage}\r\n            id={p.id}\r\n            key={p.id}/>);\r\n\r\n    const onSubmit = (Data) => {\r\n        console.log(Data)\r\n        if (Data.postImage !== undefined && Data.postImage.length !== 0) {\r\n            if (Data.postImage[0])\r\n                readFile(Data.postText, Data.postImage[0])\r\n        } else if (Data.postText !== undefined) {\r\n            props.addPost(Data.postText, null);\r\n            setClearPreview(true);\r\n        }\r\n    }\r\n\r\n    const readFile = (postText, file) => {\r\n        const reader = new FileReader();\r\n        reader.addEventListener('load', (event) => {\r\n            const result = event.target.result;\r\n            props.addPost(postText, result);\r\n            setClearPreview(true);\r\n        });\r\n        reader.readAsDataURL(file);\r\n    }\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <PostInputReduxForm {...props} onSubmit={onSubmit} clearPreview={clearPreview}\r\n                                setClearPreview={setClearPreview}/>\r\n            {props.posts.length > 0 && <div className={s.title}>\r\n                My posts\r\n            </div>}\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default React.memo(MyPosts);","export const getProfilePage = (state) => {\r\n    return {...state.profilePage}\r\n}\r\nexport const getMyId = (state) => {\r\n    return state.auth.id\r\n}\r\nexport const getIsFetching = (state) => {\r\n    return state.usersPage.isFetching\r\n}","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPosts from \"./MyPosts/MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    addPost, deletePostImage,\r\n    getProfile,\r\n    getStatus,\r\n    likePost,\r\n    removePost, setEditPostNewText, setImagePreview,\r\n    updateAvatar,\r\n    updateStatus\r\n} from \"../../redux/profileReducer\";\r\nimport {withRouter} from \"react-router\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport Preloader from \"../Commons/Preloader/Preloader\";\r\nimport {getIsFetching, getMyId} from \"../../redux/profileSelectors\";\r\n\r\n\r\nclass Profile extends React.Component {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId; //15432\r\n        if (userId === undefined) userId = this.props.id; //14854\r\n        if (userId !== null) {\r\n            this.props.getStatus(userId);\r\n            this.props.getProfile(userId);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            console.log(this.props.match.params.userId+' '+prevProps.match.params.userId)\r\n                this.props.getStatus(this.props.match.params.userId);\r\n                this.props.getProfile(this.props.match.params.userId);\r\n        }\r\n        if (this.props.avatar !== prevProps.avatar) {\r\n            this.props.getProfile(this.props.match.params.userId);\r\n        }\r\n    }\r\n\r\n    onLikeClick = (postId) => {\r\n        this.props.likePost(postId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.props.isFetching ?\r\n                    <div className={s.profilePage}>\r\n                        <div className={s.profileInfo}>\r\n                            <ProfileInfo {...this.props} link={this.props.match.params.userId}/>\r\n                        </div>\r\n                        <div className={s.myPosts}>\r\n                            {this.props.match.params.userId == this.props.id ?\r\n                                <MyPosts {...this.props}\r\n                                         onLikeClick={this.onLikeClick}\r\n                                /> : null}\r\n                        </div>\r\n                    </div>\r\n                    : <Preloader h={256} w={256}/>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// let mapStateToProps = (state) => {\r\n//     return {\r\n//         ...state.profilePage,\r\n//         id: state.auth.id,\r\n//         isFetching: state.usersPage.isFetching\r\n//     }\r\n// }\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        ...state.profilePage,\r\n        id: getMyId(state),\r\n        isFetching: getIsFetching(state)\r\n    }\r\n}\r\nlet mapDispatchToProps = {\r\n    addPost,\r\n    getProfile,\r\n    likePost,\r\n    getStatus,\r\n    updateStatus,\r\n    removePost,\r\n    updateAvatar,\r\n    setEditPostNewText,\r\n    setImagePreview,\r\n    deletePostImage\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    withRouter,\r\n    withAuthRedirect,\r\n    React.memo\r\n)(Profile)"],"sourceRoot":""}